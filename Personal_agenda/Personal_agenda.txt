Your task is to implement class CPersonalAgenda, which implements a simple employee database.

We assume the database holds information about company employees. Each employee is registered with his/her name, surname, e-mail, and salary. The database may retrieve and update the stored information, moreover, the database provides an interface to analyze the salaries.

Employees are identified by name and surname, or by their email. The identification is unique, i.e. e-mails are not duplicate in the database. Names and surnames alone are not unique. I.e. there may exist many employees with surname Svoboda, and there may exist many employees with name Peter. However, the pair Svoboda Peter is unique in the database. The database is case sensitive, i.e. names, surnames, and e-mails are considered different even if the only difference is uppercase/lowercase letter(s).

The class shall implement public interface shown below. The interface consists of:

    A constructor (without parameters). This constructor initializes a new empty database.
    Destructor -- it shall free all resources used by the instance.
    Method add (name, surname, email, salary ) which adds a new record to the database. The parameters are name, surname, e-mail and the salary of the employee. The method returns true if it succeeds, or false if it fails (the pair name, surname is already present in the database, or the email is not unique in the database).
    Methods del (name, surname) / del (email) removes the corresponding record from the database, the record is identified either by the name and surname, or by e-mail. The methods return true if they succeed, or false if they fail (the corresponding record was not present).
    Method changeName(email, newName, newSurname) changes employee name and surname. The employee to update is identified by e-mail, the name of the employee is changed to newName/newSurname. The method returns true to indicate success or false to indicate an error (the employee cannot be found, the newly assigned name/surname pair is not unique).
    Method changeEmail(name, surname, newEmail) changes employee e-mail. The employee is identified by name/surname, the e-mail is changed to newEmail. The method returns true to indicate success or false to indicate an error (the employee cannot be found, the newly assigned e-mail is not unique).
    Methods setSalary (name, surname, salary) / setSalary (email, salary) update the salary of the given employee. There are two variants of the method - the employee is identified either by the name and surname, or by the e-mail. The methods return true for success or false for a failure (employee not found).
    Methods getSalary (name, surname) / getSalary (email) return the actual salary for the given employee. There are two variants of the method - the employee is identified either by the name and surname, or by the e-mail. If the methods succeed, they return the actual employee's salary. The return value is to be 0 to indicate a failure (employee not found).
    Methods getRank (name, surname, rankMin, rankMax) / getRank (email, rankMin, rankMax) compute the rank of the employee's salary. There are two variants of the method - the employee is identified either by the name and surname, or by the e-mail. Next, there are two output parameters to be set by the function. Suppose the salaries in the database sorted in an ascending order. The goal is to find the position of the employee's salary in that list. Since the same salary may be paid to several employees, the position in the list is not a single number. In general, the position of the employee's salary may be given as an interval of values. That interval is to be filled into the output parameters rankMin/rankMax. For example, the searched employee is paid a salary of 20000. The example database contains 37 employees with the salary smaller than 20000 and another 21 employees with salary equal to 20000 (i.e. there is a total of 22 employees with salary 20000). Then the output parameters shall be set to rankMin=37 and rankMax=37+22-1=58. The return value is true to indicate success (output parameters are correctly set) or false (the employee was not found, the output parameters were not modified).
    Method getFirst ( outName, outSurname ) is designed to iterate over the employees in the database. The employees are iterated in an alphabetical order, the order is given by the surname and name (surname is the first key, name is used as the second key if surnames are equal). This method starts the iteration, i.e. it fills in the name and surname of the first employee to the output parameters outName/outSurname. Return value is either true (the database is not empty, the output parameters were set) or false (an empty database, output parameters were not modified).
    Method getNext ( name, surname, outName, outSurname ) is designed to iterate over the employees in the database. This method retrieves the next employee that follows employee name/surname in the list (see getFirst). The name of the successor is filled into the output parameters outName/outSurname. Return value is either true (success, name/surname was found and there exists a successor), or false (employee name/surname not found, or name/surname is the last employee in the list). The output parameters shall not be modified if the method fails